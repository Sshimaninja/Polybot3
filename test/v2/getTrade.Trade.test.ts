# Date: 2024-1-17
# Author: Generated by GoCodeo.

const pair = { exchangeA: 'exchangeA', exchangeB: 'exchangeB', factoryA_id: 'factoryA_id', factoryB_id: 'factoryB_id', routerA_id: 'routerA_id', routerB_id: 'routerB_id' };
const match = { poolAID: 'poolAID', poolBID: 'poolBID', token0: { symbol: 'token0' }, token1: { symbol: 'token1' } };
const price0 = { priceOutBN: new BN(100), reserves: { reserveIn: new BN(100), reserveOut: new BN(200), reserveInBN: new BN(100), reserveOutBN: new BN(200) } };
const price1 = { priceOutBN: new BN(200), reserves: { reserveIn: new BN(200), reserveOut: new BN(100), reserveInBN: new BN(200), reserveOutBN: new BN(100) } };
const slip = new BN(0.5);
const gasData = { gasPrice: new BN(100), gasLimit: new BN(200) };

const trade = new Trade(pair, match, price0, price1, slip, gasData);

expect(trade).toBeInstanceOf(Trade); 


it('should return the correct direction, difference, and difference percentage', async () => {
    const pair = {
        exchangeA: 'exchangeA',
        exchangeB: 'exchangeB',
        factoryA_id: 'factoryA_id',
        factoryB_id: 'factoryB_id',
        routerA_id: 'routerA_id',
        routerB_id: 'routerB_id'
    };
    const match = {
        poolAID: 'poolAID',
        poolBID: 'poolBID',
        token0: {
            symbol: 'token0'
        },
        token1: {
            symbol: 'token1'
        }
    };
    const price0 = {
        priceOutBN: new BN(1000),
        reserves: {
            reserveIn: new BN(100),
            reserveOut: new BN(1000)
        }
    };
    const price1 = {
        priceOutBN: new BN(1100),
        reserves: {
            reserveIn: new BN(200),
            reserveOut: new BN(2000)
        }
    };
    const slip = new BN(0.01);
    const gasData = {
        gasPrice: new BN(100),
        gasLimit: new BN(1000)
    };
    const trade = new Trade(pair, match, price0, price1, slip, gasData);
    const result = await trade.direction();
    expect(result.dir).to.equal('B');
    expect(result.diff.toString()).to.equal('100');
    expect(result.dperc.toString()).to.equal('10');
}); 


it('Should return the correct size', async () => {
    const pair = {
        exchangeA: 'exchangeA',
        exchangeB: 'exchangeB',
        factoryA_id: 'factoryA_id',
        factoryB_id: 'factoryB_id',
        routerA_id: 'routerA_id',
        routerB_id: 'routerB_id'
    };
    const match = {
        poolAID: 'poolAID',
        poolBID: 'poolBID',
        token0: {
            symbol: 'token0'
        },
        token1: {
            symbol: 'token1'
        }
    };
    const price0 = {
        priceOutBN: new BN(100),
        reserves: {
            reserveIn: new BN(1000),
            reserveInBN: new BN(1000),
            reserveOut: new BN(10000),
            reserveOutBN: new BN(10000)
        }
    };
    const price1 = {
        priceOutBN: new BN(200),
        reserves: {
            reserveIn: new BN(2000),
            reserveInBN: new BN(2000),
            reserveOut: new BN(20000),
            reserveOutBN: new BN(20000)
        }
    };
    const slip = new BN(0.01);
    const gasData = {
        gasPrice: new BN(100),
        gasLimit: new BN(1000)
    };
    const trade = new Trade(pair, match, price0, price1, slip, gasData);
    const loan = new AmountConverter(price0, match, price1.priceOutBN);
    const target = new AmountConverter(price1, match, price0.priceOutBN);
    const size = await trade.getSize(loan, target);
    expect(size.toString()).to.equal('100');
}); 


it('Should return the correct trade object', async () => {
    // Arrange
    const pair: FactoryPair = {
        exchangeA: 'exchangeA',
        exchangeB: 'exchangeB',
        factoryA_id: 'factoryA_id',
        factoryB_id: 'factoryB_id',
        routerA_id: 'routerA_id',
        routerB_id: 'routerB_id'
    };
    const match: TradePair = {
        poolAID: 'poolAID',
        poolBID: 'poolBID',
        token0: {
            symbol: 'token0',
            decimals: 18
        },
        token1: {
            symbol: 'token1',
            decimals: 18
        }
    };
    const price0: Prices = {
        priceInBN: new BN(100),
        priceOutBN: new BN(200),
        reserves: {
            reserveIn: new BN(1000),
            reserveOut: new BN(2000),
            reserveInBN: new BN(1000),
            reserveOutBN: new BN(2000)
        }
    };
    const price1: Prices = {
        priceInBN: new BN(200),
        priceOutBN: new BN(100),
        reserves: {
            reserveIn: new BN(2000),
            reserveOut: new BN(1000),
            reserveInBN: new BN(2000),
            reserveOutBN: new BN(1000)
        }
    };
    const slip: BN = new BN(0.01);
    const gasData: GasData = {
        gasPrice: new BN(1000000000),
        gasLimit: 1000000
    };
    const trade = new Trade(pair, match, price0, price1, slip, gasData);

    // Act
    const result = await trade.getTrade();

    // Assert
    expect(result).to.be.an('object');
    expect(result.trade).to.be.an('object');
    expect(result.pair).to.deep.equal(pair);
    expect(result.match).to.deep.equal(match);
    expect(result.price0).to.deep.equal(price0);
    expect(result.price1).to.deep.equal(price1);
    expect(result.slip).to.deep.equal(slip);
    expect(result.gasData).to.deep.equal(gasData);
}); 


describe('Trade', () => {
    it('should verify the values of the trade object', async () => {
        const pair = {
            exchangeA: 'exchangeA',
            exchangeB: 'exchangeB',
            factoryA_id: 'factoryA_id',
            factoryB_id: 'factoryB_id',
            routerA_id: 'routerA_id',
            routerB_id: 'routerB_id'
        };
        const match = {
            poolAID: 'poolAID',
            poolBID: 'poolBID',
            token0: {
                symbol: 'token0'
            },
            token1: {
                symbol: 'token1'
            }
        };
        const price0 = {
            priceOutBN: new BN(100),
            reserves: {
                reserveIn: new BN(1000),
                reserveOut: new BN(2000),
                reserveInBN: new BN(1000),
                reserveOutBN: new BN(2000)
            }
        };
        const price1 = {
            priceOutBN: new BN(200),
            reserves: {
                reserveIn: new BN(2000),
                reserveOut: new BN(3000),
                reserveInBN: new BN(2000),
                reserveOutBN: new BN(3000)
            }
        };
        const slip = new BN(0.5);
        const gasData = {
            gasPrice: new BN(10),
            gasLimit: new BN(100000)
        };
        const trade = new Trade(pair, match, price0, price1, slip, gasData);
        const result = await trade.getTrade();
        expect(result.ID).toBe('poolAID');
        expect(result.block).toBe(0);
        expect(result.direction).toBe('A');
        expect(result.type).toBe('filtered');
        expect(result.ticker).toBe('token0/token1');
        expect(result.tokenIn.symbol).toBe('token0');
        expect(result.tokenOut.symbol).toBe('token1');
        expect(result.flash).toBe(flashMulti);
        expect(result.loanPool.exchange).toBe('exchangeB');
        expect(result.loanPool.factory.getAddress()).toBe('factoryB_id');
        expect(result.loanPool.router.getAddress()).toBe('routerB_id');
        expect(result.loanPool.pool.getAddress()).toBe('poolBID');
        expect(result.loanPool.reserveIn).toBe(2000);
        expect(result.loanPool.reserveInBN).toBe(2000);
        expect(result.loanPool.reserveOut).toBe(3000);
        expect(result.loanPool.reserveOutBN).toBe(3000);
        expect(result.loanPool.priceIn).toBe('200');
        expect(result.loanPool.priceOut).toBe('100');
        expect(result.loanPool.repays.direct).toBe(0);
        expect(result.loanPool.repays.directInTokenOut).toBe(0);
        expect(result.loanPool.repays.simpleMulti).toBe(0);
        expect(result.loanPool.repays.getAmountsOut).toBe(0);
        expect(result.loanPool.repays.getAmountsIn).toBe(0);
        expect(result.loanPool.repays.repay).toBe(0);
        expect(result.amountRepay).toBe(0);
        expect(result.amountOutToken0for1).toBe(0);
        expect(result.amountOut).toBe(0);
        expect(result.target.exchange).toBe('exchangeA');
        expect(result.target.factory.getAddress()).toBe('factoryA_id');
        expect(result.target.router.getAddress()).toBe('routerA_id');
        expect(result.target.pool.getAddress()).toBe('poolAID');
        expect(result.target.reserveIn).toBe(1000);
        expect(result.target.reserveInBN).toBe(1000);
        expect(result.target.reserveOut).toBe(2000);
        expect(result.target.reserveOutBN).toBe(2000);
        expect(result.target.priceIn).toBe('100');
        expect(result.target.priceOut).toBe('200');
        expect(result.target.tradeSize).toBe(1000);
        expect(result.target.amountOutToken0for1).toBe(0);
        expect(result.target.amountOut).toBe(0);
        expect(result.k.uniswapKPre).toBe(0);
        expect(result.k.uniswapKPost).toBe(0);
        expect(result.k.uniswapKPositive).toBe(false);
        expect(result.gasData.gasPrice).toBe(10);
        expect(result.gasData.gasLimit).toBe(100000);
        expect(result.differenceTokenOut).toBe('100 token1');
        expect(result.differencePercent).toBe('50%');
        expect(result.profit).toBe(0);
        expect(result.profitPercent).toBe(0);
    });
}); 


const pair: FactoryPair = {
    exchangeA: 'exchangeA',
    exchangeB: 'exchangeB',
    factoryA_id: 'factoryA_id',
    factoryB_id: 'factoryB_id',
    routerA_id: 'routerA_id',
    routerB_id: 'routerB_id'
};

const match: TradePair = {
    poolAID: 'poolAID',
    poolBID: 'poolBID',
    token0: {
        symbol: 'token0',
        decimals: 18
    },
    token1: {
        symbol: 'token1',
        decimals: 18
    }
};

const price0: Prices = {
    reserves: {
        reserveIn: 'reserveIn0',
        reserveInBN: BN('reserveInBN0'),
        reserveOut: 'reserveOut0',
        reserveOutBN: BN('reserveOutBN0')
    },
    priceInBN: BN('priceInBN0'),
    priceOutBN: BN('priceOutBN0')
};

const price1: Prices = {
    reserves: {
        reserveIn: 'reserveIn1',
        reserveInBN: BN('reserveInBN1'),
        reserveOut: 'reserveOut1',
        reserveOutBN: BN('reserveOutBN1')
    },
    priceInBN: BN('priceInBN1'),
    priceOutBN: BN('priceOutBN1')
};

const slip: BN = BN('slip');

const gasData: GasData = {
    gasPrice: 'gasPrice',
    gasLimit: 'gasLimit'
};

const trade = new Trade(pair, match, price0, price1, slip, gasData);

const result = await trade.getTrade();

expect(result.loanPool.exchange).toBe('exchangeB');
expect(result.loanPool.factory.getAddress()).toBe('factoryB_id');
expect(result.loanPool.router.getAddress()).toBe('routerB_id');
expect(result.loanPool.pool.getAddress()).toBe('poolBID');
expect(result.loanPool.reserveIn).toBe('reserveIn1');
expect(result.loanPool.reserveInBN.toString()).toBe('reserveInBN1');
expect(result.loanPool.reserveOut).toBe('reserveOut1');
expect(result.loanPool.reserveOutBN.toString()).toBe('reserveOutBN1');
expect(result.loanPool.priceIn).toBe('priceInBN1');
expect(result.loanPool.priceOut).toBe('priceOutBN1');

expect(result.target.exchange).toBe('exchangeA');
expect(result.target.factory.getAddress()).toBe('factoryA_id');
expect(result.target.router.getAddress()).toBe('routerA_id');
expect(result.target.pool.getAddress()).toBe('poolAID');
expect(result.target.reserveIn).toBe('reserveIn0');
expect(result.target.reserveInBN.toString()).toBe('reserveInBN0');
expect(result.target.reserveOut).toBe('reserveOut0');
expect(result.target.reserveOutBN.toString()).toBe('reserveOutBN0');
expect(result.target.priceIn).toBe('priceInBN0');
expect(result.target.priceOut).toBe('priceOutBN0'); 


