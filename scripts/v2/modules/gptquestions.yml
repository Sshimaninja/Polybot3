I have this function which is meant to attain a gas price from an array of floating point integers attained from Polygon gas station.ethers.js is incapable of handling floating point integers, but gasPrice and gasEstimate are presented in (i think) gwei terms, but when I convert them to MATIC, they are wrong, and the trade reverts because it thinks I don't have enough funds, when I clearly do. This is the script, followed by the console.log with the wrong info:

script:
```
import { BigNumber, utils } from "ethers";
import { provider } from "../../../constants/contract";
import { BoolTrade, GAS, GasData } from "../../../constants/interfaces";
/**
 * @param trade 
 * @returns gas estimate and gas price for a given trade.
 * If the gasEstimate fails, it will return a default gas estimate of 300000.
 * @returns gasData: { gasEstimate: BigNumber, gasPrice: BigNumber, maxFee: number, maxPriorityFee: number }
 */
export async function fetchGasPrice(trade: BoolTrade): Promise<GAS> {
	const gasData: GasData = trade.gasData;
	const maxFeeInGWEI = gasData.fast.maxFee;
	const maxPriorityFeeInGWEI = gasData.fast.maxPriorityFee;
	const maxFee = Math.trunc(maxFeeInGWEI * 10 ** 9);
	const maxPriorityFee = Math.trunc(maxPriorityFeeInGWEI * 10 ** 9);
	if (trade.direction != undefined) {

		// const estimatedBaseFee = Math.trunc(gasData.estimatedBaseFee * 10 ** 9);
		// const lastestgasLimit = await provider.getBlock("latest");
		console.log('EstimatingGas for trade: ' + trade.ticker + '...');
		let gasEstimate;
		try {
			gasEstimate = await trade.flash.estimateGas.flashSwap(
				trade.loanPool.factory.address,
				trade.recipient.router.address,
				trade.tokenIn.id,
				trade.tokenOut.id,
				trade.recipient.tradeSize,
				trade.recipient.amountOut,
				trade.loanPool.amountRepay
			);
		} catch (error: any) {
			console.log(`Error in fetchGasPrice for trade: ${ trade.ticker } `, ". Using default gas estimate for gasPrice calcs");
			gasEstimate = BigNumber.from(300000);
		}
		console.log(
			"fetchGasPrice: gasEstimate: ", utils.formatUnits(gasEstimate, 18),
			"gasPrice: ", maxFee + maxPriorityFee,
			"maxFee: ", maxFee,
			"maxPriorityFee: ", maxPriorityFee,
			"gasLimit: ", gasEstimate.toNumber(),
			"gasEstimate * maxFee: ", gasEstimate.toNumber() * maxFee,
			"gasEstimate * maxPriorityFee: ", gasEstimate.toNumber() * maxPriorityFee);
		const gasPrice = BigNumber.from(maxFee)
			.add(BigNumber.from(maxPriorityFee))
			.mul(gasEstimate.toNumber());
		return { gasEstimate, gasPrice, maxFee, maxPriorityFee }
	} else {
		console.log(`>>>>>>>>>>>>>>>>>>>>> (fetchGasPrice) Trade direction undefined: ${ trade.ticker } `, ` <<<<<<<<<<<<<<<<<<<<<<<<<< `);
		return { gasEstimate: BigNumber.from(300000), gasPrice: BigNumber.from(150 + 60 * 300000), maxFee: maxFee, maxPriorityFee: maxPriorityFee };
	}


}
```
Here's the console.log:
	```
EstimatingGas for trade: WMATIC/USDT...
Error in fetchGasPrice for trade: WMATIC/USDT . Using default gas estimate for gasPrice calcs
fetchGasPrice: gasEstimate:  0.0000000000003 gasPrice:  149223319155 maxFee:  102667950281 maxPriorityFee:  46555368874 gasLimit:  300000 gasEstimate * maxFee:  30800385084300000 gasEstimate * maxPriorityFee:  13966610662200000
Possible trade: WMATIC/USDT Gas Estimate:  0.0000000000003 Gas Price:  0.0447669957465

```
In that log, the gasEstimate should read`300000`.
(thought gasPrice appears correct at`Gas Price:  0.0447669957465`)

Here's another log. This one works, (as in proceeds in the transaction) but the Gas Cost displays as`44766995.7465 MATIC` when it should be`0.0447669957465 MATIC`:
``````
	<<<<<<<<<<<< No Trade: USDC / WETH[profit < 0.3 % | -0.513105874356739729] >>>>>>>>>>>>
		Wallet Balance Matic: 8.549717211759735403 MATIC
Wallet Balance Matic: 8.549717211759735403 MATIC
Gas Cost::::::::::::: 44766995.7465 MATIC
Sufficient Matic Balance.Proceeding...
```

Finally, here's an Underflow error, due to attempting to use BigNumbers.js on a floating point integer (another error I can't pinpoint):
```
/mnt/d/code/arbitrage/polybot-live/polybotv3/node_modules/@ethersproject/logger/src.ts/index.ts:269
        const error: any = new Error(message);
                           ^
Error: underflow [ See: https://links.ethers.org/v5-errors-NUMERIC_FAULT-underflow ] (fault="underflow", operation="BigNumber.from", value=205.335900562, code=NUMERIC_FAULT, version=bignumber/5.7.0)
    at Logger.makeError (/mnt/d/code/arbitrage/polybot-live/polybotv3/node_modules/@ethersproject/logger/src.ts/index.ts:269:28)
    at Logger.throwError (/mnt/d/code/arbitrage/polybot-live/polybotv3/node_modules/@ethersproject/logger/src.ts/index.ts:281:20)
    at throwFault (/mnt/d/code/arbitrage/polybot-live/polybotv3/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts:356:19)
    at Function.BigNumber.from (/mnt/d/code/arbitrage/polybot-live/polybotv3/node_modules/@ethersproject/bignumber/src.ts/bignumber.ts:243:17)
    at /mnt/d/code/arbitrage/polybot-live/polybotv3/node_modules/@ethersproject/contracts/src.ts/index.ts:241:64
    at step (/mnt/d/code/arbitrage/polybot-live/polybotv3/node_modules/@ethersproject/contracts/lib/index.js:48:23)
    at Object.next (/mnt/d/code/arbitrage/polybot-live/polybotv3/node_modules/@ethersproject/contracts/lib/index.js:29:53)
    at fulfilled (/mnt/d/code/arbitrage/polybot-live/polybotv3/node_modules/@ethersproject/contracts/lib/index.js:20:58) {
  reason: 'underflow',
  code: 'NUMERIC_FAULT',
  fault: 'underflow',
  operation: 'BigNumber.from',
  value: 205.335900562
}
```

I am thinking these are all related, but I can't find the cause. Can you help?