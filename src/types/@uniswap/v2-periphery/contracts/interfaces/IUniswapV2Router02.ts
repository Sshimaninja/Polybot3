/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigInt,
  BigIntish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export interface IUniswapV2Router02Interface extends utils.Interface {
  functions: {
    "WETH()": FunctionFragment;
    "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "addLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "getAmountIn(uint256,uint256,uint256)": FunctionFragment;
    "getAmountOut(uint256,uint256,uint256)": FunctionFragment;
    "getAmountsIn(uint256,address[])": FunctionFragment;
    "getAmountsOut(uint256,address[])": FunctionFragment;
    "quote(uint256,uint256,uint256)": FunctionFragment;
    "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityETH(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityETHSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "removeLiquidityETHWithPermit(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "removeLiquidityWithPermit(address,address,uint256,uint256,uint256,address,uint256,bool,uint8,bytes32,bytes32)": FunctionFragment;
    "swapETHForExactTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapExactETHForTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapExactETHForTokensSupportingFeeOnTransferTokens(uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForETHSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapExactTokensForTokensSupportingFeeOnTransferTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForExactETH(uint256,uint256,address[],address,uint256)": FunctionFragment;
    "swapTokensForExactTokens(uint256,uint256,address[],address,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "WETH"
      | "addLiquidity"
      | "addLiquidityETH"
      | "factory"
      | "getAmountIn"
      | "getAmountOut"
      | "getAmountsIn"
      | "getAmountsOut"
      | "quote"
      | "removeLiquidity"
      | "removeLiquidityETH"
      | "removeLiquidityETHSupportingFeeOnTransferTokens"
      | "removeLiquidityETHWithPermit"
      | "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens"
      | "removeLiquidityWithPermit"
      | "swapETHForExactTokens"
      | "swapExactETHForTokens"
      | "swapExactETHForTokensSupportingFeeOnTransferTokens"
      | "swapExactTokensForETH"
      | "swapExactTokensForETHSupportingFeeOnTransferTokens"
      | "swapExactTokensForTokens"
      | "swapExactTokensForTokensSupportingFeeOnTransferTokens"
      | "swapTokensForExactETH"
      | "swapTokensForExactTokens"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "WETH", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addLiquidityETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAmountIn",
    values: [
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountOut",
    values: [
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsIn",
    values: [PromiseOrValue<BigIntish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAmountsOut",
    values: [PromiseOrValue<BigIntish>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidity",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETH",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETHSupportingFeeOnTransferTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETHWithPermit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeLiquidityWithPermit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapETHForExactTokens",
    values: [
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokens",
    values: [
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactETHForTokensSupportingFeeOnTransferTokens",
    values: [
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETH",
    values: [
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForETHSupportingFeeOnTransferTokens",
    values: [
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokens",
    values: [
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    values: [
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactETH",
    values: [
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapTokensForExactTokens",
    values: [
      PromiseOrValue<BigIntish>,
      PromiseOrValue<BigIntish>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>,
      PromiseOrValue<BigIntish>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "WETH", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAmountIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAmountsOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETHSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETHWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityETHWithPermitSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeLiquidityWithPermit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapETHForExactTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactETHForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForETHSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactTokensForTokensSupportingFeeOnTransferTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactETH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapTokensForExactTokens",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IUniswapV2Router02 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IUniswapV2Router02Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    WETH(overrides?: CallOverrides): Promise<[string]>;

    addLiquidity(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      amountADesired: PromiseOrValue<BigIntish>,
      amountBDesired: PromiseOrValue<BigIntish>,
      amountAMin: PromiseOrValue<BigIntish>,
      amountBMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addLiquidityETH(
      token: PromiseOrValue<string>,
      amountTokenDesired: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    getAmountIn(
      amountOut: PromiseOrValue<BigIntish>,
      reserveIn: PromiseOrValue<BigIntish>,
      reserveOut: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<[BigInt] & { amountIn: bigint }>;

    getAmountOut(
      amountIn: PromiseOrValue<BigIntish>,
      reserveIn: PromiseOrValue<BigIntish>,
      reserveOut: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<[BigInt] & { amountOut: bigint }>;

    getAmountsIn(
      amountOut: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigInt[]] & { amounts: bigint[] }>;

    getAmountsOut(
      amountIn: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<[BigInt[]] & { amounts: bigint[] }>;

    quote(
      amountA: PromiseOrValue<BigIntish>,
      reserveA: PromiseOrValue<BigIntish>,
      reserveB: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<[BigInt] & { amountB: bigint }>;

    removeLiquidity(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountAMin: PromiseOrValue<BigIntish>,
      amountBMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityETH(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityETHSupportingFeeOnTransferTokens(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityETHWithPermit(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      approveMax: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigIntish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      approveMax: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigIntish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeLiquidityWithPermit(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountAMin: PromiseOrValue<BigIntish>,
      amountBMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      approveMax: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigIntish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapETHForExactTokens(
      amountOut: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactETHForTokens(
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForETH(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokens(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactETH(
      amountOut: PromiseOrValue<BigIntish>,
      amountInMax: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    swapTokensForExactTokens(
      amountOut: PromiseOrValue<BigIntish>,
      amountInMax: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  WETH(overrides?: CallOverrides): Promise<string>;

  addLiquidity(
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    amountADesired: PromiseOrValue<BigIntish>,
    amountBDesired: PromiseOrValue<BigIntish>,
    amountAMin: PromiseOrValue<BigIntish>,
    amountBMin: PromiseOrValue<BigIntish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addLiquidityETH(
    token: PromiseOrValue<string>,
    amountTokenDesired: PromiseOrValue<BigIntish>,
    amountTokenMin: PromiseOrValue<BigIntish>,
    amountETHMin: PromiseOrValue<BigIntish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  getAmountIn(
    amountOut: PromiseOrValue<BigIntish>,
    reserveIn: PromiseOrValue<BigIntish>,
    reserveOut: PromiseOrValue<BigIntish>,
    overrides?: CallOverrides
  ): Promise<BigInt>;

  getAmountOut(
    amountIn: PromiseOrValue<BigIntish>,
    reserveIn: PromiseOrValue<BigIntish>,
    reserveOut: PromiseOrValue<BigIntish>,
    overrides?: CallOverrides
  ): Promise<BigInt>;

  getAmountsIn(
    amountOut: PromiseOrValue<BigIntish>,
    path: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigInt[]>;

  getAmountsOut(
    amountIn: PromiseOrValue<BigIntish>,
    path: PromiseOrValue<string>[],
    overrides?: CallOverrides
  ): Promise<BigInt[]>;

  quote(
    amountA: PromiseOrValue<BigIntish>,
    reserveA: PromiseOrValue<BigIntish>,
    reserveB: PromiseOrValue<BigIntish>,
    overrides?: CallOverrides
  ): Promise<BigInt>;

  removeLiquidity(
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigIntish>,
    amountAMin: PromiseOrValue<BigIntish>,
    amountBMin: PromiseOrValue<BigIntish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityETH(
    token: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigIntish>,
    amountTokenMin: PromiseOrValue<BigIntish>,
    amountETHMin: PromiseOrValue<BigIntish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityETHSupportingFeeOnTransferTokens(
    token: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigIntish>,
    amountTokenMin: PromiseOrValue<BigIntish>,
    amountETHMin: PromiseOrValue<BigIntish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityETHWithPermit(
    token: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigIntish>,
    amountTokenMin: PromiseOrValue<BigIntish>,
    amountETHMin: PromiseOrValue<BigIntish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    approveMax: PromiseOrValue<boolean>,
    v: PromiseOrValue<BigIntish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
    token: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigIntish>,
    amountTokenMin: PromiseOrValue<BigIntish>,
    amountETHMin: PromiseOrValue<BigIntish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    approveMax: PromiseOrValue<boolean>,
    v: PromiseOrValue<BigIntish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeLiquidityWithPermit(
    tokenA: PromiseOrValue<string>,
    tokenB: PromiseOrValue<string>,
    liquidity: PromiseOrValue<BigIntish>,
    amountAMin: PromiseOrValue<BigIntish>,
    amountBMin: PromiseOrValue<BigIntish>,
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    approveMax: PromiseOrValue<boolean>,
    v: PromiseOrValue<BigIntish>,
    r: PromiseOrValue<BytesLike>,
    s: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapETHForExactTokens(
    amountOut: PromiseOrValue<BigIntish>,
    path: PromiseOrValue<string>[],
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactETHForTokens(
    amountOutMin: PromiseOrValue<BigIntish>,
    path: PromiseOrValue<string>[],
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactETHForTokensSupportingFeeOnTransferTokens(
    amountOutMin: PromiseOrValue<BigIntish>,
    path: PromiseOrValue<string>[],
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForETH(
    amountIn: PromiseOrValue<BigIntish>,
    amountOutMin: PromiseOrValue<BigIntish>,
    path: PromiseOrValue<string>[],
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForETHSupportingFeeOnTransferTokens(
    amountIn: PromiseOrValue<BigIntish>,
    amountOutMin: PromiseOrValue<BigIntish>,
    path: PromiseOrValue<string>[],
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokens(
    amountIn: PromiseOrValue<BigIntish>,
    amountOutMin: PromiseOrValue<BigIntish>,
    path: PromiseOrValue<string>[],
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapExactTokensForTokensSupportingFeeOnTransferTokens(
    amountIn: PromiseOrValue<BigIntish>,
    amountOutMin: PromiseOrValue<BigIntish>,
    path: PromiseOrValue<string>[],
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactETH(
    amountOut: PromiseOrValue<BigIntish>,
    amountInMax: PromiseOrValue<BigIntish>,
    path: PromiseOrValue<string>[],
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  swapTokensForExactTokens(
    amountOut: PromiseOrValue<BigIntish>,
    amountInMax: PromiseOrValue<BigIntish>,
    path: PromiseOrValue<string>[],
    to: PromiseOrValue<string>,
    deadline: PromiseOrValue<BigIntish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    WETH(overrides?: CallOverrides): Promise<string>;

    addLiquidity(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      amountADesired: PromiseOrValue<BigIntish>,
      amountBDesired: PromiseOrValue<BigIntish>,
      amountAMin: PromiseOrValue<BigIntish>,
      amountBMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<
      [BigInt, BigInt, BigInt] & {
        amountA: bigint;
        amountB: bigint;
        liquidity: bigint;
      }
    >;

    addLiquidityETH(
      token: PromiseOrValue<string>,
      amountTokenDesired: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<
      [BigInt, BigInt, BigInt] & {
        amountToken: bigint;
        amountETH: bigint;
        liquidity: bigint;
      }
    >;

    factory(overrides?: CallOverrides): Promise<string>;

    getAmountIn(
      amountOut: PromiseOrValue<BigIntish>,
      reserveIn: PromiseOrValue<BigIntish>,
      reserveOut: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<BigInt>;

    getAmountOut(
      amountIn: PromiseOrValue<BigIntish>,
      reserveIn: PromiseOrValue<BigIntish>,
      reserveOut: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<BigInt>;

    getAmountsIn(
      amountOut: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigInt[]>;

    getAmountsOut(
      amountIn: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigInt[]>;

    quote(
      amountA: PromiseOrValue<BigIntish>,
      reserveA: PromiseOrValue<BigIntish>,
      reserveB: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<BigInt>;

    removeLiquidity(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountAMin: PromiseOrValue<BigIntish>,
      amountBMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<
      [BigInt, BigInt] & { amountA: bigint; amountB: bigint }
    >;

    removeLiquidityETH(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<
      [BigInt, BigInt] & { amountToken: bigint; amountETH: bigint }
    >;

    removeLiquidityETHSupportingFeeOnTransferTokens(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<BigInt>;

    removeLiquidityETHWithPermit(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      approveMax: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigIntish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigInt, BigInt] & { amountToken: bigint; amountETH: bigint }
    >;

    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      approveMax: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigIntish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigInt>;

    removeLiquidityWithPermit(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountAMin: PromiseOrValue<BigIntish>,
      amountBMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      approveMax: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigIntish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [BigInt, BigInt] & { amountA: bigint; amountB: bigint }
    >;

    swapETHForExactTokens(
      amountOut: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<BigInt[]>;

    swapExactETHForTokens(
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<BigInt[]>;

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForETH(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<BigInt[]>;

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactTokensForTokens(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<BigInt[]>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<void>;

    swapTokensForExactETH(
      amountOut: PromiseOrValue<BigIntish>,
      amountInMax: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<BigInt[]>;

    swapTokensForExactTokens(
      amountOut: PromiseOrValue<BigIntish>,
      amountInMax: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<BigInt[]>;
  };

  filters: {};

  estimateGas: {
    WETH(overrides?: CallOverrides): Promise<BigInt>;

    addLiquidity(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      amountADesired: PromiseOrValue<BigIntish>,
      amountBDesired: PromiseOrValue<BigIntish>,
      amountAMin: PromiseOrValue<BigIntish>,
      amountBMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    addLiquidityETH(
      token: PromiseOrValue<string>,
      amountTokenDesired: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    factory(overrides?: CallOverrides): Promise<BigInt>;

    getAmountIn(
      amountOut: PromiseOrValue<BigIntish>,
      reserveIn: PromiseOrValue<BigIntish>,
      reserveOut: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<BigInt>;

    getAmountOut(
      amountIn: PromiseOrValue<BigIntish>,
      reserveIn: PromiseOrValue<BigIntish>,
      reserveOut: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<BigInt>;

    getAmountsIn(
      amountOut: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigInt>;

    getAmountsOut(
      amountIn: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigInt>;

    quote(
      amountA: PromiseOrValue<BigIntish>,
      reserveA: PromiseOrValue<BigIntish>,
      reserveB: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<BigInt>;

    removeLiquidity(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountAMin: PromiseOrValue<BigIntish>,
      amountBMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    removeLiquidityETH(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    removeLiquidityETHSupportingFeeOnTransferTokens(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    removeLiquidityETHWithPermit(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      approveMax: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigIntish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      approveMax: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigIntish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    removeLiquidityWithPermit(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountAMin: PromiseOrValue<BigIntish>,
      amountBMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      approveMax: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigIntish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    swapETHForExactTokens(
      amountOut: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    swapExactETHForTokens(
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    swapExactTokensForETH(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    swapExactTokensForTokens(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    swapTokensForExactETH(
      amountOut: PromiseOrValue<BigIntish>,
      amountInMax: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;

    swapTokensForExactTokens(
      amountOut: PromiseOrValue<BigIntish>,
      amountInMax: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigInt>;
  };

  populateTransaction: {
    WETH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addLiquidity(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      amountADesired: PromiseOrValue<BigIntish>,
      amountBDesired: PromiseOrValue<BigIntish>,
      amountAMin: PromiseOrValue<BigIntish>,
      amountBMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addLiquidityETH(
      token: PromiseOrValue<string>,
      amountTokenDesired: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAmountIn(
      amountOut: PromiseOrValue<BigIntish>,
      reserveIn: PromiseOrValue<BigIntish>,
      reserveOut: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountOut(
      amountIn: PromiseOrValue<BigIntish>,
      reserveIn: PromiseOrValue<BigIntish>,
      reserveOut: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsIn(
      amountOut: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAmountsOut(
      amountIn: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quote(
      amountA: PromiseOrValue<BigIntish>,
      reserveA: PromiseOrValue<BigIntish>,
      reserveB: PromiseOrValue<BigIntish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountAMin: PromiseOrValue<BigIntish>,
      amountBMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityETH(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityETHSupportingFeeOnTransferTokens(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityETHWithPermit(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      approveMax: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigIntish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityETHWithPermitSupportingFeeOnTransferTokens(
      token: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountTokenMin: PromiseOrValue<BigIntish>,
      amountETHMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      approveMax: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigIntish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidityWithPermit(
      tokenA: PromiseOrValue<string>,
      tokenB: PromiseOrValue<string>,
      liquidity: PromiseOrValue<BigIntish>,
      amountAMin: PromiseOrValue<BigIntish>,
      amountBMin: PromiseOrValue<BigIntish>,
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      approveMax: PromiseOrValue<boolean>,
      v: PromiseOrValue<BigIntish>,
      r: PromiseOrValue<BytesLike>,
      s: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapETHForExactTokens(
      amountOut: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactETHForTokens(
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactETHForTokensSupportingFeeOnTransferTokens(
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForETH(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForETHSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokens(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapExactTokensForTokensSupportingFeeOnTransferTokens(
      amountIn: PromiseOrValue<BigIntish>,
      amountOutMin: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactETH(
      amountOut: PromiseOrValue<BigIntish>,
      amountInMax: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    swapTokensForExactTokens(
      amountOut: PromiseOrValue<BigIntish>,
      amountInMax: PromiseOrValue<BigIntish>,
      path: PromiseOrValue<string>[],
      to: PromiseOrValue<string>,
      deadline: PromiseOrValue<BigIntish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
